
## Redux是什么?

Redux 的适用场景：多交互、多数据源
Redux是一个web应用框架，状态管理工具

## Redux设计思想
把所有状态保存在一个对象里面，一个状态对应一个视图，反过来也是。


## Redux基本概念 & API

1. store
    
   store用来保存所有的数据，一个应用只有一个store

   创建方式:
   ```
   import {createStore} from 'redux'
   const store = createStore(fn);
   ```

2. state

    状态，某一个时刻的数据集就是state,如何获取state?

    ```
    import {createStore} from 'redux'
    const store = createStore(fn);

    const state = store.getState();
    ```

3. action

    按照redux设计思想，state变化，用户看到的视图就应该变化。
    但是用户是接触不到state的，如何通知state应该变化呢?
    action就是做这个的，action是一个对象，可以在视图和store建立联系，
    运送数据给state

    ```
    const action = {
        type:'ADD_TODO' //type是必须有的，相当于action的name
        ...
    }
    ```
    
 action可以通过函数生成

    ```
    const ADD_TODO = '添加 TODO';

    function addTodo(text) {
      return {
        type: ADD_TODO,
        text
      }
    }

    const action = addTodo('Learn Redux');
    ```

4. 发送action
   
   视图发送action的唯一方法是:store.dispatch(action);

5. reducer

   store收到action后，重新生成新的state的过程就是reducer.
   Reducer 是一个函数，它接受 Action 和当前 State 作为参数，返回一个新的 State
   reducer函数一般直接写在creaStore(reducer);不用每次都要自己去reducer,
   reducer可以接收action数组参数,它是一个纯函数，函数式编程中的纯函数概念，
   也就是说，只要是同样的输入，必定得到同样的输出。从而保证了state和view的绝对唯一对应。
   ```
   const reducer = function (state, action) {
      // ...
      return new_state;
    };
   ```

6. 监听
   监听函数，一旦 State 发生变化，就自动执行这个函数。
   let a = store.subscribe(listener);
   store.subscribe方法返回一个函数，调用这个函数就可以解除监听。
   a();

   技巧: 显然把react组件的render和setState();放在listen,就可以实现state改变，
         组件就立刻刷新。

7. reducer的拆分合并

   react是组件化的，reducer也可以拆分成多个reducer，与每一个组件对应。最后通过combineReducers()；
   合并为一个大的reducer。
   ```
   const chatReducer = (state = defaultState, action = {}) => {
      return {
        chatLog: chatLog(state.chatLog, action),
        statusMessage: statusMessage(state.statusMessage, action),
        userName: userName(state.userName, action)
      }
    };
   ```

   ```
   import { combineReducers } from 'redux';

    const chatReducer = combineReducers({
      chatLog,
      statusMessage,
      userName
    })

   ```


8. redux工作流程

   1> 用户发action  store.dispatch(action);

   2> Store 自动调用 Reducer，并且传入两个参数：
      当前 State 和收到的Action。Reducer 会返回新的 State 。
      let nextState = todoApp(previousState, action);
   3> Store 就会调用监听函数store.subscribe(listener);
   4> listener可以通过store.getState()得到当前状态,重新渲染
   ```
   function listerner() {
      let newState = store.getState();
      component.setState(newState);   
    }
   ```

9.demo1 见件 redux-demo



10. 中间件 （middleware）
    
    中间件就是通过一个函数对现有的redux框架进行一些功能的拓展。
    它作用在store.dispatch(action)，上，通过对这个方法的重新构造
    实现功能的拓展，比如实现异步操作。
    
    中间件的使用:
    1> 引入applyMiddleware(它是 Redux 的原生方法，作用是将所有中间件组成一个数组，依次执行)
    ```
    import { applyMiddleware, createStore } from 'redux';
    ```
    2> 装载中间件
    ```
    const store = createStore(
      reducer,
      applyMiddleware(some-middleware)
    );
    ```

    注意:
    1. 坑点1 createStore(),有三个函数，applyMiddleware(some-middleware)，是第三个。
    
    2. 坑点2 applyMiddleware(midd1,midd2,logger) 可以传入多个中间件，次序有的有要求，使用的时候要注意，比如logger只能放在最后。
  
11. 异步操作的两种方式

    什么是异步?同步?

    结合redux操作流程，同步指的是action一旦发出，立即执行reducer
    算出new_state.
    异步则是action发出之后，过段时间再reducer

    实现异步:

    1> 回调函数
       
       就像nodejs事件模型。回调函数是解决异步操作的基本方法

       redux回调异步的思想:
       
       通过中间件redux-thunk，使得我们可以在dispatch()中传入函数作为参数。
       所以我们需要做的就是编写一个函数，用dispatch,getState作为参数，里面定义异步的操作
       
       wonderful demo:
       ```
       const fetchPosts = postTitle => (dispatch, getState) => {
          dispatch(requestPosts(postTitle));
          return fetch(`/some/API/${postTitle}.json`)
            .then(response => response.json())
            .then(json => dispatch(receivePosts(postTitle, json)));
          };
        };

        // 使用方法一
        store.dispatch(fetchPosts('reactjs'));
        // 使用方法二
        store.dispatch(fetchPosts('reactjs')).then(() =>
          console.log(store.getState())
        );
       ```


    2> Promise

       ES6提供了异步操作容器，虽然还不完善，至少是目前最好的异步解决方案之一。

       我们需要使用redux-promise 中间件

       这个中间件使得store.dispatch方法可以接受 Promise 对象作为参数
        
      type1:
      ```
      const fetchPosts = 
        (dispatch, postTitle) => new Promise(function (resolve, reject) {
           dispatch(requestPosts(postTitle));
           return fetch(`/some/API/${postTitle}.json`)
             .then(response => {
               type: 'FETCH_POSTS',
               payload: response.json()
             });
      });
      ```

      type2:

      引入createAction,promise对象挂载到payload.
      ```

      import { createAction } from 'redux-actions';

      class AsyncApp extends Component {
        componentDidMount() {
          const { dispatch, selectedPost } = this.props
          // 发出同步 Action
          dispatch(requestPosts(selectedPost));
          // 发出异步 Action
          dispatch(createAction(
            'FETCH_POSTS', 
            fetch(`/some/API/${postTitle}.json`)
              .then(response => response.json())
          ));
        }
      ```
注意:createAction的第二个参数必须是一个 Promise 对象


## react-redux

redux和react-redux不是一个框架。

react项目不一定要用react-redux,毕竟你还要多学react-redux的API.

react-redux思想：

把所有的react组件分为2种：
   1. UI组件，也可以理解成纯粹的组件。就是没有this.state，不考虑生命周期，不调用redux API就只有props
   2. 容器组件，不负责视图展现，只负责逻辑处理，数据交互，有状态，要调用redux API

你可以这样去想象：

容器组件就是包在UI组件外边的保护层，UI组件不直接与store进行交互获取更新。
所以肯定有这么几个问题:
1. 容器组件和UI组件 如何连接在一起?
       
React-Redux 提供connect方法，用于从 UI 组件生成容器组件。connect的意思，就是将这两种组件连起来。

```
       import { connect } from 'react-redux'
       const rqcomponent = connect()(uicomponent);
```



2. 容器组件和UI组件已经store之间如何进行数据的交互，状态更新渲染视图?
     
mapStateToProps,mapDispatchToProps在创建容器组件的时候传入这两个参数即可。

               
```
       import { connect } from 'react-redux'
       const rqcomponent = connect(mapStateToProps,mapDispatchToProps)(uicomponent);
```

i. mapStateToProps(state,ownProps?)  reutrn {key:value}  key和UI组件同名参数对应
 
就像名字表达的意思一样，是state->props的映射函数。
也就是从外部(容器组件)->内部(UI组件)
每当state更新的时候，就会自动执行，重新计算 UI 组件的参数，从而触发 UI 组件的重新渲染。

使用ownProps作为参数后，如果容器组件的参数发生变化，也会引发 UI 组件重新渲染。
connect方法可以省略mapStateToProps参数，那样的话，UI 组件就不会订阅Store，就是说 Store 的更新不会引起 UI 组件的更新

其实质是告诉UI组件state的变化

      demo：
```
        const mapStateToProps = (state) => {
          return {
            todos: getVisibleTodos(state.todos, state.visibilityFilter)
          }
        }

        const getVisibleTodos = (todos, filter) => {
          switch (filter) {
            case 'SHOW_ALL':
              return todos
            case 'SHOW_COMPLETED':
              return todos.filter(t => t.completed)
            case 'SHOW_ACTIVE':
              return todos.filter(t => !t.completed)
            default:
              throw new Error('Unknown filter: ' + filter)
          }
        }
```

ii. mapDispatchToProps(dispatch,ownProps)

内部(UI组件)到外部(容器组件)
其实就是往外部发送action的方法
他可以是一个对象也可以是一个函数

所以mapDispatchToProps定义的是一个action creater 函数
键名也是对应 UI 组件的同名参数，键值应该是一个函数
其实质是告诉外部组件UI VIEW的变化
如下所示的onClick
函数:
```
const mapDispatchToProps = (
  dispatch,
  ownProps
) => {
  return {
    onClick: () => {
      dispatch({
        type: 'SET_VISIBILITY_FILTER',
        filter: ownProps.filter
      });
    }
  };
}
```

对象:
```
const mapDispatchToProps = {
  onClick: (filter) => {
    type: 'SET_VISIBILITY_FILTER',
    filter: filter
  };
}
```

3. provider

```
render(
  <Provider store={store}>
    <App />
  </Provider>,
  document.getElementById('root')
)
```

实现机制是利用react的context属性

可以不用每次都要一级一级的传入state，Provider包裹的所有组件都可以获取到store

4. react-redux-demo

见 react-redux-demo